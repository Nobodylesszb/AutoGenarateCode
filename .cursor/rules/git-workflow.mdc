---
description: Git 工作流和版本控制最佳实践
---

# Git 工作流规范

## 分支策略
- `main`: 主分支，用于生产环境
- `develop`: 开发分支，用于集成功能
- `feature/*`: 功能分支，如 `feature/user-authentication`
- `hotfix/*`: 热修复分支，如 `hotfix/critical-bug`
- `release/*`: 发布分支，如 `release/v1.2.0`

## 提交信息规范
使用约定式提交 (Conventional Commits) 格式：

```
<类型>[可选的作用域]: <描述>

[可选的正文]

[可选的脚注]
```

### 提交类型
- `feat`: 新功能
- `fix`: 修复 bug
- `docs`: 文档更新
- `style`: 代码格式调整
- `refactor`: 代码重构
- `test`: 测试相关
- `chore`: 构建过程或辅助工具的变动

### 示例
```
feat(auth): 添加用户登录功能

- 实现邮箱密码登录
- 添加记住我功能
- 集成第三方登录

Closes #123
```

## 工作流程
1. 从 `develop` 分支创建功能分支
2. 在功能分支上开发和提交
3. 定期同步 `develop` 分支的更新
4. 完成功能后创建 Pull Request
5. 代码审查通过后合并到 `develop`
6. 发布时从 `develop` 创建 `release` 分支

## 代码审查
- 每个 PR 至少需要一人审查
- 审查重点：代码质量、测试覆盖、文档更新
- 使用有意义的 PR 标题和描述
- 关联相关的 issue

## 版本标签
- 使用语义化版本号：`v1.2.3`
- 主版本号：不兼容的 API 修改
- 次版本号：向下兼容的功能性新增
- 修订号：向下兼容的问题修正

## 最佳实践
- 保持提交小而频繁
- 一个提交只做一件事
- 提交前运行测试和代码检查
- 使用 `.gitignore` 忽略不必要的文件
- 定期清理已合并的分支